<!DOCTYPE html>
<html>
  <head>
    <meta name="viewport" content="initial-scale=1.0, user-scalable=no">
    <meta charset="UTF-8">
    <title>Drawing Tools</title>
    <script type="text/javascript" src="//code.jquery.com/jquery-1.11.0.min.js"></script>
    <script type="text/javascript"
      src="http://maps.google.com/maps/api/js?sensor=false&libraries=drawing"></script>
    <style type="text/css">
      #map, html, body {
        padding: 0;
        margin: 0;
        height: 100%;
      }

      #panel {
        width: 200px;
        font-family: Arial, sans-serif;
        font-size: 13px;
        float: right;
        margin: 10px;
      }

      #color-palette {
        clear: both;
      }

      .color-button {
        width: 14px;
        height: 14px;
        font-size: 0;
        margin: 2px;
        float: left;
        cursor: pointer;
      }

      #delete-button {
        margin-top: 5px;
      }
    </style>
    <script type="text/javascript">
var rad = function(x) {
  return x * Math.PI / 180;
};

var getDistance = function(p1, p2) {
  var R = 6378137; // Earthâ€™s mean radius in meter
  var dLat = rad(p2.lat() - p1.lat());
  var dLong = rad(p2.lng() - p1.lng());
  var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
    Math.cos(rad(p1.lat())) * Math.cos(rad(p2.lat())) *
    Math.sin(dLong / 2) * Math.sin(dLong / 2);
  var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
  var d = R * c;
  return d; // returns the distance in meter
};

      var drawingManager;
      var selectedShape;
      var colors = ['#1E90FF', '#FF1493', '#32CD32', '#FF8C00', '#4B0082'];
      var selectedColor;
      var colorButtons = {};
      var check = true;
      var markers = [];

      var polygoncomplete = function(polygon) {
          var thePath = polygon.getPath();
          google.maps.event.addListener(thePath, 'set_at', function(a, b, c) {            
            if(check == false) {
              check = true;
              return;
            }
            check = false;

            var minDistance = 999;
            var minPoint;

            for(k in points) {
              point = points[k];                          
          
              var distance = getDistance(b, point);
              console.log(distance);
              if(distance < minDistance && !isNaN(distance)) {
                minDistance = distance;
                minPoint = point
              }
            }
            if(minDistance < 50 && minDistance > 0) {
              thePath.setAt(a, minPoint);            
            }
            console.log(minDistance);
            check = true;
            // console.log(minPoint);            
          });

          google.maps.event.addListener(thePath, 'insert_at', function() {
            check = true;
            // alert('b');
            // complete functions
          });          
        };

      function clearSelection() {        
        if (selectedShape) {
          selectedShape.setEditable(false);
          selectedShape = null;
        }
      }

      function setSelection(shape) {
        clearSelection();
        selectedShape = shape;
        shape.setEditable(true);
        selectColor(shape.get('fillColor') || shape.get('strokeColor'));
      }

      function getCodeSelectedShape() {
        var len = selectedShape.getPath().getLength();
        var htmlStr = "";
        for (var i = 0; i < len; i++) {
          var latLng = selectedShape.getPath().getAt(i).lng().toFixed(6) + ',' + selectedShape.getPath().getAt(i).lat().toFixed(6);
          htmlStr += latLng + ",0 ";
        }
        alert(htmlStr);
      }

      function deleteSelectedShape() {
        if (selectedShape) {
          selectedShape.setMap(null);
        }
      }

      function selectColor(color) {
        selectedColor = color;
        for (var i = 0; i < colors.length; ++i) {
          var currColor = colors[i];
          colorButtons[currColor].style.border = currColor == color ? '2px solid #789' : '2px solid #fff';
        }

        // Retrieves the current options from the drawing manager and replaces the
        // stroke or fill color as appropriate.
        var polylineOptions = drawingManager.get('polylineOptions');
        polylineOptions.strokeColor = color;
        drawingManager.set('polylineOptions', polylineOptions);

        var rectangleOptions = drawingManager.get('rectangleOptions');
        rectangleOptions.fillColor = color;
        drawingManager.set('rectangleOptions', rectangleOptions);

        var circleOptions = drawingManager.get('circleOptions');
        circleOptions.fillColor = color;
        drawingManager.set('circleOptions', circleOptions);

        var polygonOptions = drawingManager.get('polygonOptions');
        polygonOptions.fillColor = color;
        drawingManager.set('polygonOptions', polygonOptions);
      }

      function setSelectedShapeColor(color) {
        if (selectedShape) {
          if (selectedShape.type == google.maps.drawing.OverlayType.POLYLINE) {
            selectedShape.set('strokeColor', color);
          } else {
            selectedShape.set('fillColor', color);
          }
        }
      }

      function makeColorButton(color) {
        var button = document.createElement('span');
        button.className = 'color-button';
        button.style.backgroundColor = color;
        google.maps.event.addDomListener(button, 'click', function() {
          selectColor(color);
          setSelectedShapeColor(color);
        });

        return button;
      }

       function buildColorPalette() {
         var colorPalette = document.getElementById('color-palette');
         for (var i = 0; i < colors.length; ++i) {
           var currColor = colors[i];
           var colorButton = makeColorButton(currColor);
           colorPalette.appendChild(colorButton);
           colorButtons[currColor] = colorButton;
         }
         selectColor(colors[0]);
      }
      var poly = [];
      var points = [];
      function initialize() {
        var osmMapTypeOptions = {
          getTileUrl: function(coord, zoom) {
              return "http://tile.openstreetmap.org/" +
              zoom + "/" + coord.x + "/" + coord.y + ".png";
          },
          tileSize: new google.maps.Size(256, 256),
          isPng: true,
          maxZoom: 19,
          minZoom: 0,
          name: "OSM"
        };

        var osmMapType = new google.maps.ImageMapType(osmMapTypeOptions); 

        var map = new google.maps.Map(document.getElementById('map'), {
          zoom: 10,
          center: new google.maps.LatLng(22.344, 114.048),
          // mapTypeId: google.maps.MapTypeId.ROADMAP,
          disableDefaultUI: true,
          zoomControl: true,
          mapTypeControlOptions: {
            mapTypeIds: ['OSM',google.maps.MapTypeId.ROADMAP],            
          }
        });

        map.mapTypes.set('OSM', osmMapType);
        map.setMapTypeId('OSM');

        var ctaLayer = new google.maps.KmlLayer({
            url: '{{ electionHasElectoralCommission.district.linkKml }}',            
            suppressInfoWindows : true
        });
        ctaLayer.setMap(map);

        google.maps.event.addListener(ctaLayer, 'status_changed', function () {
            google.maps.event.addListenerOnce(map, 'zoom_changed', function () {
                map.setZoom(14);
                var bounds = ctaLayer.getDefaultViewport();
                map.setCenter(bounds.getCenter());
            });
        });   

        var polyOptions = {
          strokeWeight: 0,
          fillOpacity: 0.45,
          editable: true
        };
        // Creates a drawing manager attached to the map that allows the user to draw
        // markers, lines, and shapes.
        drawingManager = new google.maps.drawing.DrawingManager({
          drawingMode: google.maps.drawing.OverlayType.POLYGON,
          markerOptions: {
            draggable: true
          },
          polylineOptions: {
            editable: true
          },
          rectangleOptions: polyOptions,
          circleOptions: polyOptions,
          polygonOptions: polyOptions,
          map: map
        });
        google.maps.event.addListener(drawingManager,'polygoncomplete', polygoncomplete);
        google.maps.event.addListener(drawingManager, 'overlaycomplete', function(e) {
            if (e.type != google.maps.drawing.OverlayType.MARKER) {
            // Switch back to non-drawing mode after drawing a shape.
            drawingManager.setDrawingMode(null);

            // Add an event listener that selects the newly-drawn shape when the user
            // mouses down on it.
            var newShape = e.overlay;
            newShape.type = e.type;
            
            google.maps.event.addListener(newShape, 'click', function() {
              setSelection(newShape);
            });
            setSelection(newShape);
          }
        });

        // Clear the current selection when the drawing mode is changed, or when the
        // map is clicked.
        google.maps.event.addListener(drawingManager, 'drawingmode_changed', clearSelection);
        google.maps.event.addListener(map, 'click', clearSelection);
        google.maps.event.addDomListener(document.getElementById('delete-button'), 'click', deleteSelectedShape);
        google.maps.event.addDomListener(document.getElementById('display-kml'), 'click', getCodeSelectedShape);

        buildColorPalette();


        {% for otherElectionHasElectoralCommission in electionHasElectoralCommissions %}
          {% if otherElectionHasElectoralCommission.electoralCommission.polygon %}       
            var coords = [ 
            {% for point in otherElectionHasElectoralCommission.electoralCommission.polygon|split(' ') %}  
              {% set pointArray = point|split(',') %}
              {% if pointArray|length > 1 %}
                new google.maps.LatLng({{ pointArray[1] }},{{ pointArray[0] }}),
              {% endif %}
            {% endfor %}
            ];            
            for(k in coords) {
              coord = coords[k];
              points.push(coord);
              var marker = new google.maps.Marker({
                position: coord,
                map: map
              });
              markers.push(marker);
            }
            poly[{{ otherElectionHasElectoralCommission.electoralCommission.id }}] = new google.maps.Polygon({
              paths: coords,
              strokeColor: '#FF0000',
              strokeOpacity: 0.8,
              strokeWeight: 0.5,
              fillColor: '#FF0000',
              fillOpacity: 0.35
            });

            poly[{{ otherElectionHasElectoralCommission.electoralCommission.id }}].setMap(map);               
          {% endif %}          
        {% endfor %}

      }
      google.maps.event.addDomListener(window, 'load', initialize);
      $(function() {
        $('button.electoral-commission').click(function() {
          $('button.electoral-commission').css('color', 'black');
          $(this).css('color', 'red');
          var key = parseInt($(this).attr('data-id'));
          polygoncomplete(poly[key]);
          setSelection(poly[key]);          
        })   
        $('#toggle-markers').click(function() {
          for(k in markers) {
            marker = markers[k];
            marker.setVisible(!marker.visible);
          }
        })     
      })
    </script>
  </head>
  <body>
    <div id="panel">
      <div id="color-palette"></div>
      <div>
        <button id="delete-button">Delete Selected Shape</button>
        <button id="display-kml">Display KML Selected Shape</button>        
        {% for otherElectionHasElectoralCommission in electionHasElectoralCommissions %}
          {% if otherElectionHasElectoralCommission.electoralCommission.polygon %}
            <button class="electoral-commission" data-id="{{ otherElectionHasElectoralCommission.electoralCommission.id }}">{{ otherElectionHasElectoralCommission.electoralCommission.name }}</button>          <br />
          {% endif %}          
        {% endfor %}      
        <button id="toggle-markers">Toggle markers</button>  
      </div>
    </div>
    <div id="map"></div>
  </body>
</html>